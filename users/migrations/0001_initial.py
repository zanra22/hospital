# Generated by Django 3.0.3 on 2020-02-28 01:34

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('hospitalName', models.CharField(default='N/A', max_length=100, null=True)),
                ('lastName', models.CharField(default='N/A', max_length=100, null=True)),
                ('firstName', models.CharField(default='N/A', max_length=100, null=True)),
                ('middleName', models.CharField(default='N/A', max_length=100, null=True)),
                ('homeAddress', models.TextField(default='N/A', max_length=255, null=True)),
                ('city', models.CharField(default='N/A', max_length=30, null=True)),
                ('state', models.CharField(default='N/A', max_length=30, null=True)),
                ('postal', models.CharField(default='N/A', max_length=30, null=True)),
                ('country', models.CharField(default='N/A', max_length=30, null=True)),
                ('birthDate', models.CharField(default='N/A', max_length=100, null=True)),
                ('doctorPK', models.CharField(blank=True, max_length=255)),
                ('specialization', models.CharField(default='N/A', max_length=200, null=True)),
                ('medications', models.TextField(blank=True, max_length=300)),
                ('medicalDirectives', models.TextField(blank=True, max_length=300)),
                ('medicalProblems', models.TextField(blank=True, max_length=300)),
                ('vitalSigns', models.TextField(blank=True, max_length=300)),
                ('physicalExam', models.TextField(blank=True, max_length=300)),
                ('medicalHistory', models.TextField(blank=True, max_length=300)),
                ('medicationPlan', models.TextField(blank=True, max_length=300)),
                ('medicalOrders', models.TextField(blank=True, max_length=300)),
                ('alkPhos', models.CharField(blank=True, max_length=10)),
                ('bun', models.CharField(blank=True, max_length=10)),
                ('calcium', models.CharField(blank=True, max_length=10)),
                ('chloride', models.CharField(blank=True, max_length=10)),
                ('co2', models.CharField(blank=True, max_length=10)),
                ('creatinine', models.CharField(blank=True, max_length=10)),
                ('po4', models.CharField(blank=True, max_length=10)),
                ('potassium', models.CharField(blank=True, max_length=10)),
                ('sgot', models.CharField(blank=True, max_length=10)),
                ('biliTotal', models.CharField(blank=True, max_length=10)),
                ('uricAcid', models.CharField(blank=True, max_length=10)),
                ('ldhTotal', models.CharField(blank=True, max_length=10)),
                ('sodium', models.CharField(blank=True, max_length=10)),
                ('height', models.CharField(blank=True, max_length=10)),
                ('weight', models.CharField(blank=True, max_length=10)),
                ('temperature', models.CharField(blank=True, max_length=10)),
                ('tempSite', models.CharField(blank=True, max_length=10)),
                ('pulseRate', models.CharField(blank=True, max_length=10)),
                ('pulseRhytm', models.CharField(blank=True, max_length=10)),
                ('respRate', models.CharField(blank=True, max_length=10)),
                ('bpSystolic', models.CharField(blank=True, max_length=10)),
                ('bpDiastolic', models.CharField(blank=True, max_length=10)),
                ('cholesterol', models.CharField(blank=True, max_length=10)),
                ('hdl', models.CharField(blank=True, max_length=10)),
                ('ldl', models.CharField(blank=True, max_length=10)),
                ('bgRandom', models.CharField(blank=True, max_length=10)),
                ('cxr', models.CharField(blank=True, max_length=10)),
                ('ekg', models.CharField(blank=True, max_length=10)),
                ('papSmear', models.CharField(blank=True, max_length=10)),
                ('breastExam', models.CharField(blank=True, max_length=10)),
                ('mammogram', models.CharField(blank=True, max_length=10)),
                ('hemoccult', models.CharField(blank=True, max_length=10)),
                ('fluVax', models.CharField(blank=True, max_length=10)),
                ('pneumovax', models.CharField(blank=True, max_length=10)),
                ('tdBooster', models.CharField(blank=True, max_length=10)),
                ('footExam', models.CharField(blank=True, max_length=10)),
                ('eyeExam', models.CharField(blank=True, max_length=10)),
                ('mobile_number', models.CharField(max_length=11, null=True, validators=[django.core.validators.RegexValidator('^\\d{10,11}$')])),
                ('ward', models.CharField(blank=True, choices=[('SH-102', 'SH-102'), ('SH-101', 'SH-101'), ('SH-201', 'SH-201')], max_length=10)),
                ('maritalStatus', models.CharField(blank=True, choices=[('Single', 'Single'), ('Married', 'Married'), ('Divorced', 'Divorced'), ('Legally Seperated', 'Legally Seperated'), ('Widowed', 'Widowed')], max_length=20, null=True)),
                ('userType', models.CharField(choices=[('Doctor', 'Doctor'), ('Patient', 'Patient'), ('Nurse', 'Nurse'), ('Client', 'Client')], default='New', max_length=100)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other'), ('Prefer not to say', 'Prefer not to say')], max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
